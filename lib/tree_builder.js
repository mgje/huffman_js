// Generated by CoffeeScript 1.6.2
(function() {
  Huffman.TreeBuilder = (function() {
    function TreeBuilder(text) {
      this.text = text;
    }

    TreeBuilder.prototype.build = function() {
      var combinedList, frequencyTable;

      frequencyTable = this.buildFrequencyTable();
      combinedList = this.combineTable(frequencyTable);
      return Huffman.Tree.decodeTree(this.compressCombinedTable(combinedList));
    };

    TreeBuilder.prototype.buildFrequencyTable = function() {
      var chr, frequency, table, tableHash, _i, _len, _ref, _ref1;

      tableHash = {};
      _ref = this.text.split('');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chr = _ref[_i];
        if ((_ref1 = tableHash[chr]) == null) {
          tableHash[chr] = 0;
        }
        tableHash[chr] += 1;
      }
      table = [];
      for (chr in tableHash) {
        frequency = tableHash[chr];
        table.push([frequency, chr]);
      }
      table.sort(this.frequencySorter);
      return table;
    };

    TreeBuilder.prototype.frequencySorter = function(a, b) {
      if (a[0] > b[0]) {
        return 1;
      } else {
        if (a[0] < b[0]) {
          return -1;
        } else {
          return 0;
        }
      }
    };

    TreeBuilder.prototype.combineTable = function(table) {
      var first, second;

      while (table.length > 1) {
        first = table.shift();
        second = table.shift();
        table.push([first[0] + second[0], [first, second]]);
        table.sort(this.frequencySorter);
      }
      return table[0];
    };

    TreeBuilder.prototype.compressCombinedTable = function(table) {
      var value;

      value = table[1];
      if (Huffman.CoreHelpers.isArray(value)) {
        return [this.compressCombinedTable(value[0]), this.compressCombinedTable(value[1])];
      } else {
        return value;
      }
    };

    return TreeBuilder;

  })();

}).call(this);
